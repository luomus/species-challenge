kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: BRANCH
    required: true
  - name: APP
    required: true
    value: species-challenge
  - name: APP_PORT
    required: true
    value: "8081"
  - name: HEALTH
    required: true
    value: /health
  - name: LIVENESS_PERIOD
    required: true
    value: "30"
  - name: FAILURE_THRESHOLD
    required: true
    value: "10"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: DB
    required: true
    value: mariadb
  - name: DB_IMAGE
    required: true
    value: quay.io/fedora/mariadb-105
  - name: DB_PORT
    required: true
    value: "3306"
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "mysql
        --host=0.0.0.0
        --user=$MYSQL_USER
        --password=$MYSQL_PASSWORD
        --database=$MYSQL_DATABASE
        -e \"SELECT 1\""
    ]'
  - name: MYSQL_DATABASE
    required: true
  - name: MYSQL_USER
    required: true
  - name: MYSQL_PASSWORD
    required: true
  - name: FINBIF_API_TOKEN
    required: true
  - name: FLASK_SECRET_KEY
    required: true
  - name: HOST
    required: true
  - name: ITSYSTEM
    required: true
  - name: JOB_CMD
    required: true
    value: '["/usr/src/app/backup.sh"]'
  - name: JOB_SCHEDULE
    required: true
    value: "0 23 * * *"
  - name: JOB_LIMIT
    required: true
    value: "7"
  - name: JOB_CONCURRENCY
    required: true
    value: "Forbid"
  - name: RCLONE_ACCESS_KEY_ID
    required: true
  - name: RCLONE_SECRET_ACCESS_KEY
    required: true
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${DB}-${BRANCH}
  spec:
    storageClassName: "standard-csi"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "20Gi"
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  data:
    branch: ${BRANCH}
    db_port: ${DB_PORT}
    app_port: ${APP_PORT}
    mysql_database: ${MYSQL_DATABASE}
    mysql_user: ${MYSQL_USER}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  type: Opaque
  data:
    finbif_api_token: ${FINBIF_API_TOKEN}
    mysql_password: ${MYSQL_PASSWORD}
    flask_secret_key: ${FLASK_SECRET_KEY}
    rclone_access_key_id: ${RCLONE_ACCESS_KEY_ID}
    rclone_secret_access_key: ${RCLONE_SECRET_ACCESS_KEY} 
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${APP_PORT}
      spec:
        containers:
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          imagePullPolicy: Always
          name: ${APP}-${BRANCH}
          env:
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: mysql_database
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: mysql_user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: mysql_password
          - name: MYSQL_HOST
            value: ${DB}-${BRANCH}
          - name: ITSYSTEM
            value: ${ITSYSTEM}
          - name: FINBIF_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: finbif_api_token
          - name: FLASK_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: flask_secret_key
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          ports:
          - containerPort: ${{APP_PORT}}
          startupProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${DB_PORT}
      spec:
        containers:
        - image: ${DB_IMAGE}
          imagePullPolicy: Always
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          startupProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: mysql_database
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: mysql_user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: mysql_password
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${APP_PORT}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${DB_PORT}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${{APP_PORT}}
    tls:
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${APP}-${BRANCH}
- kind: CronJob
  apiVersion: batch/v1
  metadata:
    name: ${APP}-${BRANCH}
  spec:
    schedule: ${JOB_SCHEDULE}
    concurrencyPolicy: ${JOB_CONCURRENCY}
    successfulJobsHistoryLimit: ${{JOB_LIMIT}}
    failedJobsHistoryLimit: ${{JOB_LIMIT}}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: ${APP}-${BRANCH}
              image: ghcr.io/luomus/${APP}:${BRANCH}
              imagePullPolicy: Always
              command: ${{JOB_CMD}}
              env:
              - name: RCLONE_CONFIG_DEFAULT_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-${BRANCH}
                    key: rclone_access_key_id
              - name: RCLONE_CONFIG_DEFAULT_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-${BRANCH}
                    key: rclone_secret_access_key
              - name: MYSQL_DATABASE
                valueFrom:
                  configMapKeyRef:
                    name: ${APP}-${BRANCH}
                    key: mysql_database
              - name: MYSQL_USER
                valueFrom:
                  configMapKeyRef:
                    name: ${APP}-${BRANCH}
                    key: mysql_user
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-${BRANCH}
                    key: mysql_password
              - name: MYSQL_HOST
                value: ${DB}-${BRANCH}
              - name: BRANCH
                valueFrom:
                  configMapKeyRef:
                    name: ${APP}-${BRANCH}
                    key: branch
            restartPolicy: Never
